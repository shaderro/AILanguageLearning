# 文章数据集成到前端显示 - 基本步骤

## 前端集成步骤

### 步骤1: 后端API扩展
- 在 `frontend/my-web-ui/backend/main.py` 中添加新的API端点
- 创建 `/api/articles` 端点来读取处理后的JSON文件
- 添加 `/api/articles/{id}` 端点获取特定文章
- 可能需要添加文章列表功能



### 步骤2: 前端API服务扩展
- 在 `frontend/my-web-ui/src/services/api.js` 中添加文章相关的API调用函数
- 创建 `getArticlesList()`, `getArticleById(id)` 等函数
- 在 `frontend/my-web-ui/src/hooks/useApi.js` 中添加对应的React Query hooks

### 步骤3: 数据模型定义
- 在 `frontend/my-web-ui/backend/models.py` 中定义文章相关的Pydantic模型
- 确保数据结构与JSON文件格式匹配
- 定义响应格式和错误处理

### 步骤4: 前端组件设计
- 创建文章列表组件 (ArticleList)
- 创建文章详情组件 (ArticleDetail) 
- 创建句子显示组件 (SentenceView)
- 创建Token高亮组件 (TokenHighlight)

### 步骤5: 页面集成
- 在 `frontend/my-web-ui/src/App.jsx` 中添加文章相关的路由
- 创建新的文章页面或扩展现有页面
- 集成到现有的导航系统中

### 步骤6: 数据展示逻辑
- 实现文章列表的显示和筛选
- 实现点击文章进入详情页
- 实现句子的逐句显示
- 实现Token的交互功能（如点击查看详情）

### 步骤7: 样式和交互
- 设计文章阅读的UI布局
- 添加Token高亮和交互效果
- 实现响应式设计
- 添加加载状态和错误处理

### 步骤8: 数据流整合
- 确保文章数据能正确从后端传递到前端
- 实现数据的缓存和更新机制
- 处理大数据量的分页或虚拟滚动

### 步骤9: 测试和优化
- 测试文章数据的加载和显示
- 优化大文件的加载性能
- 测试不同屏幕尺寸的显示效果

### 步骤10: 功能扩展
- 添加文章搜索功能
- 实现文章收藏或标记
- 添加阅读进度保存
- 集成词汇学习功能（利用Token数据）

## 关键考虑点

1. **数据量**: JSON文件有308KB，需要考虑加载性能
2. **Token交互**: 可以利用Token的ID信息实现点击查看详情
3. **多语言支持**: 德文文本的显示和字体支持
4. **响应式设计**: 文章阅读在不同设备上的体验
5. **数据同步**: 如果后端JSON文件更新，前端如何同步

## 当前数据状态

- **输入文件**: hp1.txt (德文哈利波特第一章)
- **处理结果**: 51个句子，1,862个tokens
- **输出文件**: 
  - hp1_processed_20250916_123831.json (完整数据，308KB)
  - hp1_summary_20250916_123831.json (摘要数据，502B)

## 数据结构示例

```json
{
  "text_id": 1,
  "text_title": "Harry Potter und der Stein der Weisen - Kapitel 1",
  "sentences": [
    {
      "sentence_id": 1,
      "sentence_body": "Mr und Mrs Dursley im Ligusterweg Nummer 4 waren stolz darauf...",
      "tokens": [
        {
          "token_body": "Mr",
          "token_type": "text",
          "global_token_id": 0,
          "sentence_token_id": 1
        }
      ],
      "token_count": 25
    }
  ],
  "total_sentences": 51,
  "total_tokens": 1862
}
```

这个流程可以让你逐步将预处理好的文章数据集成到现有的UI系统中，同时保持代码的模块化和可维护性。

#### 步骤1详细说明

- 显示文章到UI，且仅 `token_type: "text"` 可选择，`punctuation` 与 `space` 不可选择。
- 提供文章列表与单篇详情两个API。

接口设计：
- GET /api/articles  返回文章摘要列表
- GET /api/articles/{id}  返回指定文章详情（为UI标记token可选择性）

返回示例：
- 列表：
{
  "status": "success",
  "data": [
    {
      "text_id": 1,
      "text_title": "Harry Potter und der Stein der Weisen - Kapitel 1",
      "total_sentences": 51,
      "total_tokens": 1862,
      "text_tokens": 1200,
      "created_at": "2025-09-16T12:38:31"
    }
  ],
  "message": "成功获取文章列表"
}

- 详情：
{
  "status": "success",
  "data": {
    "text_id": 1,
    "text_title": "Harry Potter und der Stein der Weisen - Kapitel 1",
    "sentences": [
      {
        "sentence_id": 1,
        "sentence_body": "...",
        "tokens": [
          {"token_body":"Mr","token_type":"text","global_token_id":0,"sentence_token_id":1,"selectable":true,"is_selected":false},
          {"token_body":" ","token_type":"space","global_token_id":1,"sentence_token_id":2,"selectable":false,"is_selected":false},
          {"token_body":"und","token_type":"text","global_token_id":2,"sentence_token_id":3,"selectable":true,"is_selected":false}
        ],
        "token_count": 25,
        "selectable_token_count": 15
      }
    ],
    "total_sentences": 51,
    "total_tokens": 1862,
    "selectable_tokens": 1200
  },
  "message": "成功获取文章详情"
}

后端实现要点：
- 为UI预处理token：
  - 仅当 `token_type === "text"` 时，设置 `selectable=true`；否则为 `false`。
  - 统一增加 `is_selected=false` 初始状态，便于前端直接使用。
- 读取 real_data_raw/result 下的处理后JSON；列表端点仅返回摘要，详情端点返回完整句子+token。
- 可加缓存与错误处理（文件不存在/JSON解析失败等）。

错误响应格式：
{
  "status": "error",
  "error": {"code": "ARTICLE_NOT_FOUND", "message": "文章不存在", "details": "text_id: 999"}
}

实现优先级：
1) 先实现 /api/articles 与 /api/articles/{id}（核心功能）
2) 其后增加缓存与性能优化
3) 最后扩展搜索、标签、阅读进度等

与前端数据流：
前端请求 → 后端读取JSON → 标记token可选择性 → 返回数据 → 前端渲染（仅text可点）
'@; $enc = New-Object System.Text.UTF8Encoding($false); [System.IO.File]::AppendAllText("article_data_integration.txt", $content, $enc)

#### 步骤1详细说明

- 显示文章到UI，且仅 `token_type: "text"` 可选择，`punctuation` 与 `space` 不可选择。
- 提供文章列表与单篇详情两个API。

接口设计：
- GET /api/articles  返回文章摘要列表
- GET /api/articles/{id}  返回指定文章详情（为UI标记token可选择性）

返回示例：
- 列表：
{
  "status": "success",
  "data": [
    {
      "text_id": 1,
      "text_title": "Harry Potter und der Stein der Weisen - Kapitel 1",
      "total_sentences": 51,
      "total_tokens": 1862,
      "text_tokens": 1200,
      "created_at": "2025-09-16T12:38:31"
    }
  ],
  "message": "成功获取文章列表"
}

- 详情：
{
  "status": "success",
  "data": {
    "text_id": 1,
    "text_title": "Harry Potter und der Stein der Weisen - Kapitel 1",
    "sentences": [
      {
        "sentence_id": 1,
        "sentence_body": "...",
        "tokens": [
          {"token_body":"Mr","token_type":"text","global_token_id":0,"sentence_token_id":1,"selectable":true,"is_selected":false},
          {"token_body":" ","token_type":"space","global_token_id":1,"sentence_token_id":2,"selectable":false,"is_selected":false},
          {"token_body":"und","token_type":"text","global_token_id":2,"sentence_token_id":3,"selectable":true,"is_selected":false}
        ],
        "token_count": 25,
        "selectable_token_count": 15
      }
    ],
    "total_sentences": 51,
    "total_tokens": 1862,
    "selectable_tokens": 1200
  },
  "message": "成功获取文章详情"
}

后端实现要点：
- 为UI预处理token：
  - 仅当 `token_type === "text"` 时，设置 `selectable=true`；否则为 `false`。
  - 统一增加 `is_selected=false` 初始状态，便于前端直接使用。
- 读取 real_data_raw/result 下的处理后JSON；列表端点仅返回摘要，详情端点返回完整句子+token。
- 可加缓存与错误处理（文件不存在/JSON解析失败等）。

错误响应格式：
{
  "status": "error",
  "error": {"code": "ARTICLE_NOT_FOUND", "message": "文章不存在", "details": "text_id: 999"}
}

实现优先级：
1) 先实现 /api/articles 与 /api/articles/{id}（核心功能）
2) 其后增加缓存与性能优化
3) 最后扩展搜索、标签、阅读进度等

与前端数据流：
前端请求 → 后端读取JSON → 标记token可选择性 → 返回数据 → 前端渲染（仅text可点）
'@; $enc = New-Object System.Text.UTF8Encoding($false); [System.IO.File]::AppendAllText("article_data_integration.txt", $content, $enc)